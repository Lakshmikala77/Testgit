# This workflow deploys code in DEV AP on push trigger to development branch
name: Deploy Coprocessor application to GKE in Development of AP Region.

on:
  pull_request:
    types:
      - closed
    branches: [ 'development' ]
    
# on:
#   pull_request:
#     types: [opened, synchronize, edited]
#     branches:
#       - development

# on:
#   pull_request_review:
#     types: [submitted, edited]

env:
  BRANCH: ${{ github.event.pull_request.base.ref }}

jobs:
  lint:
    # if: ${{ startsWith(github.event.pull_request.title, '[ap/eu/us/') && github.event.pull_request.merged == true }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Installing dependent npm packages
        uses: ./.github/actions/installing_packages

      - name: Linting
        run: npm run lint:quiet
        shell: bash

  tests_coverage:
    needs: Lint
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkout code
        uses: ./.github/actions/test_coverage

  Build:
    needs: tests_coverage
    name: Build coprocessor Application
    runs-on: ubuntu-latest
 
    permissions:
      contents: read
      id-token: write
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Action for Retrieving PR Title
      uses: ./.github/actions/get-pr-title
    
    - name: Run Action for Getting AP DEV Environmental Variables
      uses: ./.github/actions/get-inputs-dev/ap-dev

   
    ### Printing Variables for Testing ###
    - name: Print AP DEV Environmental Variables    
      run: |
        echo ${{ env.GKE_PROJECT }}
        echo ${{ env.NAMESPACE }}
        echo ${{ env.FAST_SERVICE_ACCOUNT }}
        echo ${{ env.GCP_SERVICE_ACCOUNT }}
        echo ${{ env.REGION }}


    - name: Run Action for GCP Authentication
      uses: ./.github/actions/gcp_authentication

  
    - name: Run Action for Installing packages
      uses: ./.github/actions/installing_packages

    ### npm Build Creation ###
    - name: Create npm Build prior to docker image
      run:
        npm run build:production
      env:
        INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    ## Docker Image Creation ###
    - name: Create docker image
      run:
        # docker build -t ${{ env.DEPLOYMENT_NAME }} .
        docker build -t ${{ env.DEPLOYMENT_NAME }} -f Dockerfile .
      env:
        INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    ### Authenticate to Artifact Registry ###
    - name: Configure Docker CLI
      run: |
        gcloud auth list
        gcloud auth configure-docker ${{ env.GCP_AR_URL }} -q

    - name: Docker list
      run: docker images

    ### Docker Image Tag ###
    - name: Tag Docker image
      run: |
        docker tag ${{ env.DEPLOYMENT_NAME }}:latest ${{ env.GCP_AR_URL }}/${{ env.NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:${{ env.VERSION_NUMBER }}
        docker tag ${{ env.DEPLOYMENT_NAME }}:latest ${{ env.GCP_AR_URL }}/${{ env.NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:latest
        docker tag ${{ env.DEPLOYMENT_NAME }}:latest ${{ env.GCP_AR_URL }}/${{ env.PREDEV_NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:${{ env.VERSION_NUMBER }}
        docker tag ${{ env.DEPLOYMENT_NAME }}:latest ${{ env.GCP_AR_URL }}/${{ env.PREDEV_NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:latest
      
    ### Pubishing Image to AR ###
    - name: Push Docker image
      run: |
        gcloud auth configure-docker ${{ env.GKE_REGION }}-docker.pkg.dev
        docker push ${{ env.GCP_AR_URL }}/${{ env.NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:${{env.VERSION_NUMBER}}
        docker push ${{ env.GCP_AR_URL }}/${{ env.NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:latest
        docker push ${{ env.GCP_AR_URL }}/${{ env.PREDEV_NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:${{env.VERSION_NUMBER}}
        docker push ${{ env.GCP_AR_URL }}/${{ env.PREDEV_NAMESPACE }}/graphqlfederation-${{ env.DEPLOYMENT_NAME }}:latest

  Deploy:
    name: Deploy Coprocessor Application to the Cluster
    runs-on: ubuntu-latest
    needs: Build
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Action for Retrieving PR title
        uses: ./.github/actions/get-pr-title
      
      - name: Run Action for Getting AP DEV Environmental Variables
        uses: ./.github/actions/get-inputs-dev/ap-dev

      - name: Run Action for GCP Authentication
        uses: ./.github/actions/gcp_authentication
        id: gcp-auth

      - id: 'get-credentials'
        name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id: ${{env.GKE_PROJECT}}

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'
        id: install

      ## Set Up Helm dependency ###
      - name: Setup Helm dependency
        run: |
          cd helm/
          echo "GITHUB_WORKSPACE = ${{ github.workspace }}"
          echo "Current directory: $(pwd)"
          helm dependency build ./${{ env.DEPLOYMENT_NAME }}   

      # helm dry run and check for pre dev prior to helm upgrade
      - name: Helm dry run predev
        id: helm_dry_run_predev    
        run: |   
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.PREDEV_NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{ env.REGION }}/values.${{ env.PREDEV_ENVIRONMENT }}.yaml --dry-run --debug \
                  --set coprocessor-helm-chart.image.tag=$imageTag
              fi
          done             
          
        continue-on-error: false 

      - name: Check dry run result of predev
        if: ${{ steps.helm_dry_run_predev.outcome != 'success' }}
        run: echo "Dry run failed for predev. Please check the logs and fix the issues."
        continue-on-error: false
        
     # helm dry run and check for dev prior to helm upgrade
      - name: Helm dry run dev
        id: helm_dry_run_dev    
        run: |    
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{ env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml --dry-run --debug \
                  --set coprocessor-helm-chart.image.tag=$imageTag
              fi
          done           
          
        continue-on-error: false 

      - name: Check dry run result of dev
        if: ${{ steps.helm_dry_run_dev.outcome != 'success' }}
        run: echo "Dry run failed for dev. Please check the logs and fix the issues."
        continue-on-error: false       
        
      ## Deploy Manifest files to GKE Cluster using Helm ###
      - name: Deploy using Helm in ${{ env.NAMESPACE }} namespace
        if: ${{ steps.helm_dry_run_predev.outcome == 'success' && steps.helm_dry_run_dev.outcome == 'success' }}
        run: |
          echo "helm Dry run successful for predev, proceeding to next step."           
          echo "Running Helm deployment to ${{ env.PREDEV_ENVIRONMENT }}"
          cd helm/
          input="${{ vars.IMAGE_TAGS }}"

          # Change IFS to comma for splitting the input into services
          IFS=',' read -r -a imageTagArray <<< "$input"
          
          # Loop through each service and split by '='
          for imageTagList in "${imageTagArray[@]}"; do
              IFS='=' read -r env imageTag <<< "$imageTagList"
              if [[ $env == 'ap-dev' ]]; then
                echo "Service Name: $env, Image Tag: $imageTag"
                helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
                  --wait --atomic \
                  --namespace=${{ env.PREDEV_NAMESPACE }} \
                  --set coprocessor-helm-chart.image.tag=$imageTag \
                  --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.PREDEV_ENVIRONMENT }}.yaml \
                  --timeout 10m
                echo "helm Dry run successful for dev, proceeding to next step."           
                echo "Running Helm deployment to ${{ env.ENVIRONMENT }}"
                
                helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
                  --namespace=${{ env.NAMESPACE }} \
                  --set coprocessor-helm-chart.image.tag=$imageTag \
                  --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml \
                  --wait --atomic \
                  --timeout 10m    
                if [[ $imageTag == 'latest' ]]; then
                  kubectl rollout restart deployments/${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} -n ${{ env.NAMESPACE }}
                  kubectl rollout restart deployments/${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} -n ${{ env.PREDEV_NAMESPACE }}
                fi
              fi
          done
      # - name: Helm upgrade
      #   id: helm_dry_run_dev    
      #   run: |    
      #     cd helm/
      #       helm install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml --dry-run --debug --set coprocessor-helm-chart.image.tag=latest
      #       # helm template ${{ env.DEPLOYMENT_NAME }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} --namespace=${{ env.NAMESPACE }} --values ./${{ env.DEPLOYMENT_NAME }}/${{ env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml --dry-run --debug --set coprocessor-helm-chart.image.tag=latest
            
      #       echo "Running Helm deployment to ${{ env.PREDEV_ENVIRONMENT }}"        

      #     # predev namespace deployment 
            # helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.PREDEV_ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
            #   --wait --atomic \
            #   --namespace=${{ env.PREDEV_NAMESPACE }} \
            #   --set coprocessor-helm-chart.image.tag=latest \
            #   --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.PREDEV_ENVIRONMENT }}.yaml \
            #   --timeout 10m    

      #     # dev namespace deployment
            # helm upgrade --install ${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} ./${{ env.DEPLOYMENT_NAME }} \
            #   --namespace=${{ env.NAMESPACE }} \
            #   --set coprocessor-helm-chart.image.tag=latest \
            #   --values ./${{ env.DEPLOYMENT_NAME }}/${{env.REGION }}/values.${{ env.ENVIRONMENT }}.yaml \
            #   --wait --atomic \
            #   --timeout 10m    

      #       kubectl rollout restart deployments/${{ env.DEPLOYMENT_NAME }}-${{ env.REGION }}-${{ env.ENVIRONMENT }} -n ${{ env.NAMESPACE }}
